<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.0.xsd
	       http://www.springframework.org/schema/mvc
	      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	      http://mybatis.org/schema/mybatis-spring
		http://mybatis.org/schema/mybatis-spring.xsd"
       default-lazy-init="false">


    <!--引入配置文件-->
    <context:property-placeholder location="classpath*:/config/setting.properties"/>

    <!--配置静态资源-->
    <mvc:resources location="/resources/" mapping="/resources/**"/>

    <!--自动扫描注入-->
    <context:component-scan base-package="com.dessert.*.controller,com.dessert.*.*.controller,com.dessert.*.*.*.controller,com.dessert.controller,com.dessert.controller.*,com.dessert.controller.*.*,com.dessert.controller.*.*.*"/>
    <context:component-scan base-package="com.dessert.*.service.*,com.dessert.*.*.service.*,com.dessert.*.*.*.service.*"/>
    <context:component-scan base-package="com.dessert.sys.common.aop"/>


    <!-- 启动对@AspectJ注解的支持 -->
    <!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--配置拦截器-->
    <mvc:interceptors>
        <bean id="AuthorityHandlerInterceptor"
              class="com.dessert.sys.common.interceptor.SystemIsLoginInterceptor"></bean>
    </mvc:interceptors>



    <mvc:annotation-driven/>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 配置数据源，使用的是alibaba的Druid数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${jdbc.validationQuery}" />
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
        <property name="testOnReturn" value="${jdbc.testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />

        <!--
        <property name="removeAbandoned" value="true" />
        <property name="removeAbandonedTimeout" value="1800" />
        <property name="logAbandoned" value="true" />
        -->

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${jdbc.filters}" />

    </bean>






    <!--mybatis配置-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:/config/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath*:mapper/*/*_mapper.xml" />
    </bean>
    <!-- 事务管理器配置,单数据源事务 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean class="com.dessert.sys.common.dao.DaoClient">
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>

    <!-- 配置那些类的方法进行事务管理 -->
    <tx:advice id="testTxAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="save*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="add*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="modify*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="get*" propagation="SUPPORTS"/>
            <tx:method name="select*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>


    <aop:config>
        <aop:pointcut id="pc"
                      expression="execution(* com.dessert.*.service.*.*(..)) or execution(* com.dessert.*.*.service.*.*(..)) or execution(* com.dessert.*.*.*.service.*.*(..))"/>
        <aop:advisor advice-ref="testTxAdvice" pointcut-ref="pc"/>
    </aop:config>


    <!--控制上传文件-->
    <bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置上传文件的最大尺寸为20MB -->
        <property name="maxUploadSize">
            <value>20971520</value>
        </property>
    </bean>


    <!--
    <import resource="classpath*:/bean/*-bean.xml" />
    -->

    <!--配置日志-->
    <!--将日志类注入到bean中-->
    <bean id="log" class="com.dessert.sys.common.interceptor.SystemLoggerInterceptor"></bean>
    <aop:config>
        <!-- 定义切面 -->
        <aop:aspect id="alog" ref="log">
            <!-- 定义连接点 -->
            <aop:pointcut id="logPoint"
                          expression="execution(* com.dessert.*.*.*.service.*.*(..)) or
									execution(* com.dessert.*.*.service.*.*(..))"/>
            <!-- 定义Target处理后异常增强 -->
            <aop:after-throwing method="afterThrowingException" pointcut-ref="logPoint" throwing="e"/>
        </aop:aspect>
    </aop:config>


    <!-- Jedis 连接池配置-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>

    <!-- Jedis ConnectionFactory 数据库连接配置-->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:host-name="${redis.host}"
          p:port="${redis.port}"
          p:password="${redis.pass}"
          p:pool-config-ref="poolConfig"
    />

    <!--redisTemplate配置，redisTemplate是对Jedis的对redis操作的扩展-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!--如果不配置Serializer，那么存储的时候智能使用String，如果用User类型存储，那么会提示错误User can't cast to String！！！-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>

    <bean id="redisTemplateTool"  class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.dessert.sys.common.tool.SysRedisTool"/>
        <property name="targetMethod" value="initRedis"/>
        <property name="arguments" ref="redisTemplate"/>
    </bean>


    <!-- 配置freeMarker的模板路径 -->
    <bean
            class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/ftl/"/>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">0</prop>
                <prop key="default_encoding">UTF-8</prop>
                <prop key="locale">zh_CN</prop>
            </props>
        </property>
    </bean>
    <!-- 配置freeMarker视图解析器 -->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <property name="contentType" value="text/html;charset=utf-8"/>
        <property name="cache" value="true"/>
        <property name="prefix" value=""/>
        <property name="suffix" value=".ftl"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
        <property name="exposeRequestAttributes" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="requestContextAttribute" value="request"/>
    </bean>


</beans>